# 监听设定
bind:
    addr: "127.0.0.1:53" # [必需]监听地址。IP设为`0.0.0.0`可监听包括IPv6的所有地址。
    protocol: "all" # 监听协议。`tcp`|`udp`|`all`其中之一。`all`会同时监听tcp和udp。

# 分流器设定
dispatcher:
    cache: # 缓存设定
        size: 0 # 缓存大小。单位: 条。0表示禁用缓存。
        min_ttl: 300 # 最小生存时间。单位: 秒。
    max_concurrent_queries: 150 # 最大并发查询数。默认150。

# 上游服务器设定
server:
    # local本地服务器设定
    local:
        # 服务器地址。留空表示禁用该服务器。
        addr: "223.5.5.5:443" 
        protocol: "doh" # 服务器协议。`tcp`|`udp`|`doh`|`dot`其中之一。
        socks5: "" # socks5代理服务器地址。注意：udp协议不会使用socks5代理。不支持认证。

        # TCP设定，仅`protocol`为`tcp`时有用。
        tcp:
            idle_timeout: 10 # 空连接超时时间。单位: 秒。0表示禁用连接重用。

        # DoT设定，仅`protocol`为`dot`有用。
        dot:
            server_name: "dns.alidns.com" # [必需] 服务器的域名/证书名。
            idle_timeout: 10 # 空连接超时时间。单位: 秒。0表示禁用连接重用。

        # DoH设定，仅`protocol`为`doh`有用。
        doh:
            url: "https://223.5.5.5/dns-query" # [必需] DoH的URL。

        # IP策略设定
        # 格式: "action:file|action:file|..."
        #
        # IP策略决定local返回的结果能否被接受。可由多个策略构成，用`|`分割，
        # 处理流程从左至右，如果上一条策略没有命中，将匹配下一条。
        # 如果直到最后都没有命中任何策略，默认接受。
        #
        # `file`为IP表文件的路径。
        # `action`可以是：
        #   `accept`: 如果IP在`file`中，接受。
        #   `deny`: 如果IP在`file`中，拒绝并丢弃。
        #   `deny_all`: 无条件拒绝，用在最后，拒绝直到最后都没有命中任何策略的结果。
        #       相当于把默认处理方式改为`拒绝并丢弃`。后不需要跟`file`。
        #
        # e.g. "deny:./blacklist.txt"
        # e.g. "accept:./whitelist.txt|deny_all" 仅允许`whitelist.txt`里的IP。
        # e.g. "deny:./blacklist.txt|accept:./whitelist.txt|deny_all"
        # 默认："accept:./chn.list|deny_all" 
        ip_policies: "accept:./chn.list|deny_all"

        # 域名策略设定
        # 格式: "action:file|action:file|..."
        #
        # 域名分流策略根据请求的域名决定local如何处理该请求。可由多个策略构成，用`|`分割。
        # 处理流程从左至右，如果上一条策略没有命中，将匹配下一条。
        # 如果直到最后都没有命中任何策略，默认为`允许local处理该请求`。
        #
        # `file`为域名表的路径。
        # `action`可以是
        #   `force`: 如果域名在`file`中，则强制local处理该请求(不会被remote解析)。
        #       并且最终应答会无视其他所有匹配条件(IP，请求类型等)，强制接受。
        #   `accept`: 如果域名在`file`中，允许local处理该请求(同时也会送至remote)。
        #   `deny`: 如果域名在`file`中，禁止local处理该请求(仅由remote解析)。
        #   `deny_all`: 无条件拒绝，用在最后，拒绝直到最后都没有命中任何策略的请求。
        #       相当于把默认处理方式改为`禁止local处理该请求`。后不需要跟`file`。
        #
        # e.g. "deny:./blacklist.txt" 禁止local解析`blacklist.txt`里的域名。
        # e.g. "force:./whitelist.txt" 强制local解析`whitelist.txt`里的域名。
        # e.g. "force:./whitelist.txt|deny_all" 强制并限制local只能解析`whitelist.txt`里的域名。
        # e.g. "force:./chn_domain.list|accept:./whitelist.txt|deny_all"
        # 默认："force:./chn_domain.list"
        domain_policies: "force:./chn_domain.list|deny_all"

        # 域名策略是否也检查返回应答中的CNAME记录(CNAME深度检查)。
        # `force`这时同等于`accept`。如果返回的CNAME被`deny`，则该应答被拒绝并丢弃。
        check_cname: true 

        # 高级
        deny_unusual_types: false # 是否屏蔽不常见(包含多个Question、非A和AAAA)请求。
        deny_results_without_ip: true  # 是否丢弃没有IP的A和AAAA应答。

    # remote远程服务器设定
    remote:
        # 以下说明与 local 相同，参见上文。
        addr: "1.0.0.1:853"
        protocol: "dot"
        socks5: ""
        tcp:
            idle_timeout: 10
        dot:
            server_name: "cloudflare-dns.com"
            idle_timeout: 10
        doh:
            url: "https://cloudflare-dns.com/dns-query"

        # 延时启动等待时间 单位: 毫秒。
        # 如果是非零值，则不会立即请求remote，而是等待一段时间。
        # 如果local的返回了结果并且被接受，则不再请求remote。
        # 如果请求local还没有返回结果或结果被拒绝了，则开始请求remote。
        # 该选项能牺牲一点延时来降低请求remote的次数，进而降低设备负载。
        # 同时减小了本地域名被remote抢答的概率。
        # 默认：`0`。禁用延时启动，请求将同步发送。
        # 如需启用，建议值：local服务器延时的120%。
        delay_start: 0

# ECS设定
# 格式: `CIDR`
# 如果填入，来自下游没有ECS的请求将被插入ECS。
# e.g. "1.2.3.0/24"
# e.g. "2001:dd8:1a::/48"
ecs:
    local: "" # 送至local的请求会插入该subnet。
    remote: "" # 送至remote的请求会插入该subnet。
    force_overwrite: false # 强制改写下游请求已包含的ECS。

# CA证书设定
ca:
    # 证书文件的路径。证书需为PEM格式，可以是ca-bundle(包含多个PEM块)。
    # 留空默认使用系统自带CA证书。
    path: "" 
