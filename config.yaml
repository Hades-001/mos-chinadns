# mos-chinadns的`分流器`，`上游`和`服务器`之间的关系图示：
#
# 分流器收到下游请求时，会同时转发至所有上游。
#    下游请求---->[分流器]---->[上游A]--{请求策略允许}-->[服务器1]
#                      \--->[上游B]--{请求策略拒绝}--X
#
# 最先被某上游接受的应答会被分流器转发至下游。
#    [下游]<----[分流器]<----{应答策略允许}--[上游A]<--服务器1应答(最先回应)
#                       X--{应答策略拒绝}--[上游B]<--服务器2应答
#                       X--{应答策略允许}--[上游C]<--服务器3应答(比服务器1回应的晚)
#
# 重定向请求流程。
#    [下游]<----[分流器]<--服务器2应答--[服务器2]<--下游请求
#                                               | 开始请求服务器2
#                                   X---{重定向至服务器2}--[上游A]--服务器1应答


# 分流器设定
dispatcher:
    # 格式: `["protocol://ip:port","protocol://ip:port",...]`
    #
    # `protocol`: 监听协议。`tcp4`、`udp4`、`tcp6`或`udp6`。末尾的`4`和`6`代表是IPv4还是IPv6。
    # `ip`: 监听地址。
    # `port`: 监听端口。
    bind: [ "udp4://127.0.0.1:53","tcp4://127.0.0.1:53","udp6://[::1]:53","tcp6://[::1]:53" ]
    max_udp_size: 1280 # 最大UDP负载大小。回应下游的UDP包长度如果大于该值，会被截断。(一般无需修改)


# 上游设定
# 可包含一个或多个上游。每个上游都包含一个服务器和分流策略。
# 策略能决定某一请求是否允许发送至服务器以及如何处理其应答。
# 来自下游的请求会同时分发至所有上游。分流器会将最先被接受的应答转发至下游。
upstream:
    local: # <--这个tag可以随意更改，但不能重复。仅作为这个upstream的标识，用于log记录。
        server: "aliyun" # 该上游默认使用的服务器的tag。该tag必需在server中定义。

        # 每个策略都有一个`action`，在满足条件时就会执行。
        # 分流策略的能采取的操作`action`有:
        #   `accept`或`deny`: 接受或丢弃请求。
        #   `redirect_XXXXXX`: 重定向请求到tag名为`XXXXXX`服务器。该tag必需在server中定义。
        #           `unhandlable_types`和`domain`策略不支持重定向。
        #           e.g. `redirect_aliyun`, `redirect_google`。
        #    空白: 什么都不做，跳过该策略。
        #
        # `unhandlable_types`, `error_rcode`和`without_ip`为单个策略，只有一个`action`。
        #
        # `domain`, `cname`和`ip`的策略可以由多个子策略构成，用`|`分割。处理流程从左至右。
        #   格式: `"action:file|action:file|action:file|...|action"`
        #   其中`file`是用来匹配的域名/IP表的路径。如果`action`没有指定`file`，则会作为默认操作。
        policies:

            # 应用于请求的策略。
            query:

                # 如何处理无法分流的请求类型(除了A和AAAA以外的请求类型)。
                # "accept": 非(A和AAAA)请求会被发送至该服务器并且其应答会被直接接受。
                # "deny": 非(A和AAAA)请求会被丢弃(不会由本上游解析)。
                unhandlable_types: "accept"

                # 域名策略
                # 如果直到最后都没有触发任何策略，则请求会发送至该上游，然后执行后续的应答策略。
                # `action`说明:
                #   `accept`: 允许发送至该上游，并且直接接受其应答(不会再执行后续的任何策略)。
                #   `deny`: 丢弃请求(不会由本上游解析)。
                # e.g. "deny:./blacklist.txt" `blacklist.txt`里的域名不会发送至该上游。
                # e.g. "accept:./whitelist.txt|deny" 只有`whitelist.txt`里的域名才会发送至该上游。
                domain: "accept:./chn_domain.list|deny:./non_chn_domain.list"

            # 应用于应答的策略
            reply:

                # 如何处理Rcode不成功(Rcode!=0)的应答。
                error_rcode: "deny"

                # CNAME策略
                # 如果返回应答没有CNAME部分，该策略不会生效。
                cname: "accept:./chn_domain.list"

                # 如何处理不包含任何IP的应答。
                without_ip: "deny"

                # IP策略
                # 因为是最后的策略，所以如果直到最后都没有命中任何策略，默认处理方式为`接受`。
                # e.g. "deny:./blacklist.txt"
                # e.g. "accept:./whitelist.txt|deny" 仅允许`whitelist.txt`里的IP。
                ip: "accept:./chn_ip.list|deny"

    remote: # 另外一个上游，tag为`remote`。
        server: "google"
        policies:
            query:
                unhandlable_types: "accept"
                domain: "deny:./chn_domain.list|accept"
            reply:
                error_rcode: "accept"
                cname: ""
                without_ip: "accept"
                ip: ""

    # 如果还想添加上游，将上面的设置模板复制一遍。
    # 修改tag名称，保证互相不重复。

# 服务器设定
# 可包含一个或多个服务器。
server:
    aliyun: # <--这个tag可以随意更改，但不能重复。作为该服务器的标识，用于`upstream`。
        addr: "223.5.5.5:443" # [必需] 服务器地址。
        protocol: "doh" # [必需] 服务器协议。`tcp`|`udp`|`doh`|`dot`其中之一。
        socks5: "" # socks5代理服务器地址。不支持密码验证。udp协议不会使用socks5代理。

        # 是否进行请求去重。
        # false: 来自下游的请求将一对一的发送至上游服务器。
        # true: 如果已经有一个相同的请求正在进行，后来的请求将不再发送至上游服务器，
        #       而是等待并采用之前请求返回的结果。
        deduplicate: false

        # edns0相关设定
        edns0:

            # 在转发至该服务器的请求中附加的ECS地址。
            # 格式为CIDR。e.g. "1.2.3.0/24", "2001:dd8:1a::/48"。
            # A类型的请求将附加ipv4的地址。AAAA类型的请求将附加ipv6的地址
            # 其他类别的请求不会附加ECS。
            # 如果请求中已包含ECS，默认不会复写，除非设置了`overwrite_ecs`。
            client_subnet:
                ipv4: ""
                ipv6: ""
            overwrite_ecs: false # 是否强制改写下游请求已有的ECS。

        # TCP设定，仅`protocol`为`tcp`时有用。
        tcp:
            idle_timeout: 10 # 空连接超时时间。0表示禁用连接重用。单位: 秒。

        # DoT设定，仅`protocol`为`dot`有用。
        dot:
            server_name: "dns.alidns.com" # [必需] 服务器的域名/证书名。
            idle_timeout: 10 # 空连接超时时间。0表示禁用连接重用。单位: 秒。

        # DoH设定，仅`protocol`为`doh`有用。
        doh:
            url: "https://223.5.5.5/dns-query" # [必需] DoH的URL。

    # 另一个服务器，tag名为`google`。
    google:
        addr: "8.8.8.8:443"
        protocol: "doh"
        socks5: ""
        deduplicate: false
        edns0:
            client_subnet:
                ipv4: ""
                ipv6: ""
            overwrite_ecs: false
        tcp:
            idle_timeout: 10
        dot:
            server_name: "dns.google"
            idle_timeout: 10
        doh:
            url: "https://dns.google/dns-query"

    # 如果还想添加服务器，将上面的设置模板复制一遍。
    # 修改tag名称，保证互相不重复。

# CA证书设定
ca:
    # 导入用于TLS(DoT/DoH)验证的CA证书。证书需为PEM格式。
    # 可以是ca-bundle(包含多个PEM块)。可指定多个证书文件。
    # 留空默认使用系统自带CA证书。
    # e.g. ["./my.cert"]
    # e.g. ["./a.cert", "./b.cert", ...]
    path: [ ]
