# 分流器设定
dispatcher:
    # 监听地址 [必需]
    # 格式: ["protocol://ip:port","protocol://ip:port",...]
    #   `protocol`为监听协议。`tcp`或`udp`。
    #   `ip`是监听地址。设为`0.0.0.0`可监听本机包括IPv6的所有地址，不必再监听[::]。
    #   `port`是监听端口。
    # e.g. 仅监听本机回环: ["udp://127.0.0.1:53","tcp://127.0.0.1:53","udp://[::1]:53","tcp://[::1]:53"]
    # e.g. 监听本机所有接口的所有地址: ["udp://0.0.0.0:53","tcp://0.0.0.0:53"]
    bind: [ "udp://127.0.0.1:53","tcp://127.0.0.1:53","udp://[::1]:53","tcp://[::1]:53" ]
    max_udp_size: 1280 # 最大UDP负载大小。


# 上游设定
# 可包含一个或多个上游。
# 各个上游的策略将决定对于某一请求是否允许发送至该上游解析以及应答是否被采纳。
# 请求会同时发送给允许的上游。分流器最终会采纳最先被某一上游采纳的应答。
upstream:

    # 一个上游，tag名叫`local`。下面这个键这虽然看起来是个不能更改，但其实它可以随意更改。
    # 它仅表示该上游的名称，仅用于log记录。只需保证多个上游名称无重复即可。
    local:
        server_tag: "aliyun_doh" # 使用的服务器名。该tag必需在server中定义。

        # 策略
        # 策略处理流程从上到下。
        # 策略的action目前有三种：
        #    "accept": 允许。
        #    "deny": 拒绝。
        #    "redirect_XXXXXX": 重定向请求到tag名为`XXXXXX`服务器。该tag必需在server中定义。
        #       注意: 部分策略不支持redirect操作。
        #       e.g. "redirect_server1", "redirect_google"
        policies:

            query: # 请求策略。

                # 如何处理无法分流的请求类型。
                # 目前域名/IP分流策略只能处理A和AAAA请求。
                # "accept": 非(A和AAAA)请求会被发送至该服务器并且其应答会被直接采纳(不会再执行后续的任何策略)。
                # "deny": 非(A和AAAA)请求不会由本上游解析。
                unhandlable_types: "accept"

                # 域名策略
                # 域名策略将根据请求的域名决定该请求是否允许发送至该上游。
                # 可由多个策略构成，用`|`分割。处理流程从左至右，如果上一条策略没有命中，将匹配下一条。
                # 如果直到最后都没有命中任何策略，则请求会发送至该上游，然后执行后续的策略。
                #
                # 格式: "action:file|action:file|action:file|action..."
                # `file`为域名表的路径。如果没有指定`file`，则会匹配所有域名。
                # `action`可以是
                #   `accept`: 允许发送至该上游，并且直接采纳其应答(不会再执行后续的任何策略)。
                #   `deny`: 拒绝发送至该上游。
                # e.g. "deny:./blacklist.txt" `blacklist.txt`里的域名不会发送至该上游。
                # e.g. "accept:./whitelist.txt|deny" 只有`whitelist.txt`里的域名才会发送至该上游。
                domain: "accept:./chn_domain.list"

            reply: # 应答策略

                # 如何处理Rcode不成功(Rcode!=0)的应答
                # "accept": 直接采纳(不会再执行后续的任何策略)。
                # "deny": 丢弃。
                # "redirect_XXXXXX": 重定向请求。
                error_rcode: "deny"

                # CNAME策略
                # 如果返回应答没有CNAME部分，该策略不会生效。
                # 可由多个策略构成，用`|`分割。处理流程从左至右，如果上一条策略没有命中，将匹配下一条。
                # 如果直到最后都没有命中任何策略，则继续执行后续的策略。
                #
                # 格式: "action:file|action:file|action:file|action..."
                # `file`为域名表的路径。如果没有指定`file`，则会匹配所有域名。
                # `action`可以是
                #   `accept`: 直接采纳应答(不会再执行后续的任何策略)。
                #   `deny`: 丢弃该应答。
                #   "redirect_XXXXXX": 重定向请求。
                cname: "accept:./chn_domain.list"

                # 如何处理不包含任何IP的应答。
                # "accept": 直接采纳(不会再执行后续的任何策略)。
                # "deny": 丢弃。
                # "redirect_XXXXXX": 重定向请求。
                without_ip: "deny"

                # IP策略
                # 可由多个策略构成，用`|`分割，处理流程从左至右，如果上一条策略没有命中，将继续匹配下一条。
                # 如果直到最后都没有命中任何策略，默认`采纳该应答`。
                #
                # 格式: "action:file|action:file|action:file|..."
                # `file`为IP表文件的路径。如果没有指定`file`，则会匹配所有IP。
                # `action`是策略，可以是:
                #   `accept`: 采纳该应答。
                #   `deny`: 丢弃该应答。
                #   "redirect_XXXXXX": 重定向请求。
                #
                # e.g. "deny:./blacklist.txt"
                # e.g. "accept:./whitelist.txt|deny" 仅允许`whitelist.txt`里的IP。
                # e.g. "deny:./blacklist.txt|accept:./whitelist.txt|deny"
                ip: "accept:./chn.list|deny"

    remote: # 另外一个上游，名叫`remote`。设置说明参见上文。
        server_tag: "google_doh"
        policies:
            query:
                unhandlable_types: "accept"
                domain: "deny:./chn_domain.list|accept"
            reply:
                error_rcode: "accept"
                cname: ""
                without_ip: "accept"
                ip: ""

    # 如果还想添加上游，只需将上面的设置模板复制一遍。
    # 保持上游的tag互相不一样和缩进对齐即可。

# 服务器设定
# 在这里添加服务器
server:

    # 一个服务器，tag名叫`aliyun_doh`。这个tag可以可以随意更改。只需保证多个服务器名称无重复即可。
    aliyun_doh:
        addr: "223.5.5.5:443" # 服务器地址。
        protocol: "doh" # 服务器协议。`tcp`|`udp`|`doh`|`dot`其中之一。
        socks5: "" # socks5代理服务器地址。注意: socks5服务器不能有密码验证。udp协议不会使用socks5代理。

        # 是否请求去重。
        # false: 来自下游的请求将一对一的发送至上游服务器。
        # true: 如果已经有一个相同的请求正在进行，后来的请求将不再发送至上游服务器，而是等待并采用之前请求返回的结果。
        deduplicate: false

        # edns0相关设定
        edns0:
            # 希望发送至该服务器的ECS地址，格式为CIDR。
            # e.g. "1.2.3.0/24"
            # e.g. "2001:dd8:1a::/48"
            client_subnet: ""

            # 是否强制改写下游请求已有的ECS。
            overwrite_ecs: false

        # TCP设定，仅`protocol`为`tcp`时有用。
        tcp:
            idle_timeout: 10 # 空连接超时时间。单位: 秒。0表示禁用连接重用。

        # DoT设定，仅`protocol`为`dot`有用。
        dot:
            server_name: "dns.alidns.com" # [必需] 服务器的域名/证书名。
            idle_timeout: 10 # 空连接超时时间。单位: 秒。0表示禁用连接重用。

        # DoH设定，仅`protocol`为`doh`有用。
        doh:
            url: "https://223.5.5.5/dns-query" # [必需] DoH的URL。

    google_doh:
        addr: "8.8.8.8:443"
        protocol: "doh"
        socks5: ""
        deduplicate: false
        edns0:
            client_subnet: ""
            overwrite_ecs: false
        tcp:
            idle_timeout: 10
        dot:
            server_name: "dns.google"
            idle_timeout: 10
        doh:
            url: "https://dns.google/dns-query"

    # 如果还想添加服务器，只需将上面的设置模板复制一遍。
    # 保持服务器的tag互相不一样和缩进对齐即可。

# CA证书设定
ca:
    # 导入用于TLS验证的CA证书。证书需为PEM格式。
    # 可以是ca-bundle(包含多个PEM块)。可指定多个证书文件。
    # 留空默认使用系统自带CA证书。
    # e.g. ["./my.cert"]
    # e.g. ["./a.cert", "./b.cert", ...]
    path: [ ]
